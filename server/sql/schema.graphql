type User implements Node {
  id: ID!

}
type Manuscript implements Node {
  id: ID!
  #Date type is not built in, need to import one
  created: Date!
  updated: Date!
  stage: Stage!
  title: String!
  type: SubmissionType!
  coverLetter: String!
  #"eLife 5 digit article ID which persists through to publication"
  articleIdentifier: String!
  subjectAreas: [MajorSubjectArea!]!
  previouslyDiscussed: String
  previouslySubmitted: [ArticleSearchParameters!]
  coSubmission: [ArticleSearchParameters!]
  relatedManuscripts: [Manuscript!]
  suggestedEditors: [EditorSuggestion!]!
  excludedEditors: [EditorSuggestion!]!
  suggestedReviewers: [ReviewerSuggestion!]!
  excludedReviewers: [ReviewerSuggestion!]!
  suggestionsConflict: Boolean!
  persons: [ManuscriptPerson!]!
  qcIssues: [QCIssue!]
  submissionFiles: [File!]!
  manuscriptHistory: [ChangeLog!]
}

enum Stage {
  STARTED
  SUBMITTED
  AWAITINGINITIALQUALITYCHECK
  INITIALQUALITYCHECKINPROGRESS
  CHANGESREQUESTED
  AWAITINGCHANGES
  CHANGESCOMPLETE
  INITIALQUALITYCHECKCOMPLETE
  DEPUTYEDITORASSIGNED
  AWAITINGDEPUTYEDITORASSESSMENT
  DEPUTYEDITORASSESSMENTINPROGRESS
  DEPUTYEDITORASSESSMENTCOMPLETE
  SENIOREDITORASSIGNED
  AWAITINGSENIOREDITORASSESSMENT
  SENIOREDITORASSESSMENTINPROGRESS
  SENIOREDITORASSESSMENTCOMPLETE
  DECISIONLETTERDRAFTED
  ENCOURAGED
  REJECTED
  WITHDRAWN
}

enum SubmissionType {
  RESEARCHARTICLE
  TOOLSANDRESOURCES
  SHORTREPORT
  RESEARCHADVANCE
  FEATUREARTICLE
  SCIENTIFICCORRESPONDENCE
}

#Hard-code for now, with a view to calling from API in the future
enum MajorSubjectArea {
  BIOCHEMISTRYANDCHEMICALBIOLOGY
  CANCERBIOLOGY
  CELLBIOLOGY
  CHROMOSOMESANDGENEEXPRESSION
  COMPUTATIONALANDSYSTEMSBIOLOGY
  DEVELOPMENTALBIOLOGYANDSTEMCELLS
  ECOLOGY
  EPIDEMIOLOGYANDGLOBALHEALTH
  EVOLUTIONARYBIOLOGY
  GENETICSANDGENOMICS
  HUMANBIOLOGYANDMEDICINE
  IMMUNOLOGYANDINFLAMMATION
  MICROBIOLOGYANDINFECTIOUSDISEASE
  NEUROSCIENCE
  PHYSICSOFLIVINGSYSTEMS
  PLANTBIOLOGY
  STRUCTURALBIOLOGYANDMOLECULARBIOPHYSICS
}

type ArticleSearchParameters implements Node {
  id: ID!
  created: Date!
  updated: Date!
  title: String!
  correspondingAuthor: String!
}

#Is it weird that this type has only one required field?
type ManuscriptPerson implements Node {
  id: ID!
  created: Date!
  updated: Date!
  user: User
  role: ManuscriptRole!
  #Alias has no use once upgraded to a User. Is there any way to move the information from one place to the other?
  alias: UserAlias
  metadata: ManuscriptPersonMetadata
}

#This extends the base type in pubsweet
extend type User implements Node {
  id: ID!
  created: Date!
  updated: Date!
  firstName: String!
  lastName: String!
  publishedName: String
  institution: String!
  email: String!
  orcidId: String!
  roles: [GlobalRole!]!
}

type UserAlias implements Node {
  id: ID!
  created: Date!
  updated: Date!
  firstName: String!
  lastName: String!
  publishedName: String
  email: String!
  institution: String!
}

#Should this base interface have any fields?
interface ManuscriptPersonMetadata {
  id: ID!
  created: Date!
  updated: Date!
}

type AuthorMetadata implements Node, ManuscriptPersonMetadata {
  id: ID!
  created: Date!
  updated: Date!
  rank: Int!
  contributions: String!
  corresponding: Boolean!
  conflictOfInterest: String
}

type ReviewerMetadata implements ManuscriptPersonMetadata {
  id: ID!
  created: Date!
  updated: Date!
  rank: Int!
  coRelationship: [ManuscriptPerson]
  #Accounts for instances where a post-doc has helped review
  conflictOfInterest: String
  revealIdentity: Boolean!
}

enum ManuscriptRole {
  DEPUTYEDITOR
  SENIOREDITOR
  REVIEWINGEDITOR
  REVIEWER
  AUTHOR
  SUBMITTER
}

type EditorSuggestion implements Node {
  id: ID!
  created: Date!
  updated: Date!
  user: User!
  role: ManuscriptRole!
  reason: String
}

type ReviewerSuggestion implements Node {
  id: ID!
  created: Date!
  updated: Date!
  name: String!
  email: String!
  reason: String
}

type ChangeLog implements Node {
  id: ID!
  created: Date!
  manuscript: Manuscript!
  user: User!
  actions: [String!]!
}


type File implements Node {
  # URI yet to be defined
  id: ID!
  created: Date!
  updated: Date!
  uri: String!
  type: FileType!
  format: String!
  size: String!
  lastChangeDate: Date!
  lastChangeUser: User!
  #Refers to changes to individual files
}

#Submitter chooses file type within context of domain.
enum FileType {
  ARTICLEFILE
  FIGURE
  FIGURESUPPLEMENT
  SOURCEDATA
  RICHMEDIA
  SOURCECODE
  SUPPLEMENTARYFILE
}

type RelatedSubmission implements Node {
  id: ID!
  created: Date!
  updated: Date!
  connectionType: SubmissionRelationship!
  submissionIdentifier: String!
  title: String!
}

enum SubmissionRelationship {
  COSUBMISSION
  RESUBMISSION
  ADVANCE
  SCIENTIFICCORRESPONDENCE
}

enum GlobalRole {
  STAFF
  EDITORINCHIEF
  # The following roles impart no extra permissions but allow the system to populate the list of editors
  DEPUTYEDITOR
  SENIOREDITOR
  REVIEWINGEDITOR
  # One role encompasses the permissions etc. of the role(s) below it. Senior editor has all permissions of Reviewing editor and appears in lists of reviewing editors
}

type QCIssue implements Node {
  id: ID!
  created: Date!
  submission: Manuscript!
  location: String!
  #To be defined
  comments: [Comment!]!
  resolved: Boolean!
}

type Comment implements Node {
  id: ID!
  created: Date!
  updated: Date!
  user: User!
  text: String!
}

type Session implements Node {
  id: ID!
}
