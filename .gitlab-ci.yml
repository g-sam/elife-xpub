variables:
  DOCKER_DRIVER: overlay2
  DOCKER_HOST: tcp://localhost:2375/
  IMAGE_ORG: xpub
  IMAGE_NAME: xpub-elife
  BASE_DOMAIN: gateway.xpub.semioticsquares.com
  CONFIGURATION_REPOSITORY: https://gitlab.coko.foundation/yld/xpub-deployment-config-postgres.git

services:
  - docker:dind

stages:
  - build
  - test
  - review
  - staging
  - production
  - demo

build:
  image: docker:latest
  stage: build
  script:
    - docker version
    - docker pull $IMAGE_ORG/$IMAGE_NAME:latest
    - docker build --cache-from $IMAGE_ORG/$IMAGE_NAME:latest --build-arg CI_COMMIT_SHA -t $IMAGE_ORG/$IMAGE_NAME:$CI_COMMIT_SHA .
    - if [ -z "$DOCKERHUB_USERNAME" ] || [ -z "$DOCKERHUB_PASSWORD" ]; then echo "Not pushing" && exit 0; fi
    - docker login -u $DOCKERHUB_USERNAME -p $DOCKERHUB_PASSWORD
    - echo "Ignore warning! Cannot perform an interactive login from a non TTY device"
    - docker push $IMAGE_ORG/$IMAGE_NAME:$CI_COMMIT_SHA

lint:
  image: $IMAGE_ORG/$IMAGE_NAME:$CI_COMMIT_SHA
  stage: test
  variables:
    GIT_STRATEGY: none
  script:
    - cd ${HOME}
    - npm run lint

test:
  image: $IMAGE_ORG/$IMAGE_NAME:$CI_COMMIT_SHA
  stage: test
  variables:
    GIT_STRATEGY: none
    # setup data for postgres image
    POSTGRES_USER: test
    POSTGRES_PASSWORD: pw
    # connection details for tests
    PGUSER: test
    PGPASSWORD: pw
    NODE_ENV: test
  services:
    - postgres
  script:
    - cd ${HOME}
    # specify host here else it confuses the linked postgres image
    - PGHOSTADDR=127.0.0.1 npm test

test:e2e:
  image: $IMAGE_ORG/$IMAGE_NAME:$CI_COMMIT_SHA
  stage: test
  variables:
    GIT_STRATEGY: none
    BROWSER: chrome:headless --no-sandbox
    # setup data for postgres image
    POSTGRES_USER: test
    POSTGRES_PASSWORD: pw
    # connection details for tests
    PGUSER: test
    PGPASSWORD: pw
    NODE_ENV: test
  services:
    - postgres
  script:
    - cd ${HOME}
    # specify host here else it confuses the linked postgres image
    - export PGHOSTADDR=127.0.0.1
    - npm run test:e2e -- --screenshots test/screenshots --screenshots-on-fails
  artifacts:
    paths:
    - test/screenshots
    expire_in: 1 week

push:latest:
  image: docker:latest
  stage: staging
  script:
    - if [ -z "$DOCKERHUB_USERNAME" ] || [ -z "$DOCKERHUB_PASSWORD" ]; then echo "Not pushing" && exit 0; fi
    - docker login -u $DOCKERHUB_USERNAME -p $DOCKERHUB_PASSWORD
    - echo "Ignore warning! Cannot perform an interactive login from a non TTY device"
    - docker pull $IMAGE_ORG/$IMAGE_NAME:$CI_COMMIT_SHA
    - docker build --cache-from $IMAGE_ORG/$IMAGE_NAME:$CI_COMMIT_SHA --build-arg CI_COMMIT_SHA -t $IMAGE_ORG/$IMAGE_NAME:latest --label COMMIT_SHA=$CI_COMMIT_SHA .
    - docker push $IMAGE_ORG/$IMAGE_NAME:latest
  only:
  - develop

review:
  image: pubsweet/deployer:latest
  stage: review
  variables:
    PACKAGE_NAME: xpub-elife
    FORCE_FRESH_DB: "yes"
    REQUIRES_PROVISIONING: "yes"
  environment:
    name: review/$CI_COMMIT_REF_NAME
    # !! kube-lego will fail if domain > 64 chars
    url: "http://${CI_ENVIRONMENT_SLUG}.${BASE_DOMAIN}"
    on_stop: stop_review
  except:
  - master
  - develop
  script:
    - source deploy.sh
    - create_deployment

stop_review:
  image: pubsweet/deployer:latest
  stage: review
  variables:
    PACKAGE_NAME: xpub-elife
    REQUIRES_PROVISIONING: "yes"
    GIT_STRATEGY: none
  environment:
    name: review/$CI_COMMIT_REF_NAME
    action: stop
  when: manual
  except:
  - master
  - develop
  script:
    - source deploy.sh
    - delete_deployment
    - delete_objects_in_environment pvc

staging:
  image: pubsweet/deployer:latest
  stage: staging
  variables:
    PACKAGE_NAME: xpub-elife
    REQUIRES_PROVISIONING: "yes"
  environment:
    name: xpub-elife-staging
    url: "https://${CI_ENVIRONMENT_SLUG}.${BASE_DOMAIN}"
  only:
  - develop
  script:
    - source deploy.sh
    - create_deployment

demo:
  image: pubsweet/deployer:latest
  stage: demo
  variables:
    PACKAGE_NAME: xpub-elife
    REQUIRES_PROVISIONING: "yes"
  environment:
    name: xpub-elife-demo
    url: "https://${CI_ENVIRONMENT_SLUG}.${BASE_DOMAIN}"
  when: manual
  script:
    - source deploy.sh
    - create_deployment
